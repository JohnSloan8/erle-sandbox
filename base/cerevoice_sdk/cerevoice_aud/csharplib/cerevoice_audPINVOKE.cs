//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


class cerevoice_audPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="SWIGRegisterExceptionCallbacks_cerevoice_aud")]
    public static extern void SWIGRegisterExceptionCallbacks_cerevoice_aud(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_cerevoice_aud")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_cerevoice_aud(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_cerevoice_aud(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_cerevoice_aud(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(cerevoice_audPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(cerevoice_audPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="SWIGRegisterStringCallback_cerevoice_aud")]
    public static extern void SWIGRegisterStringCallback_cerevoice_aud(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_cerevoice_aud(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static cerevoice_audPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_player_new")]
  public static extern global::System.IntPtr CPRC_sc_player_new(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_player_delete")]
  public static extern void CPRC_sc_player_delete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_player_stream_time")]
  public static extern double CPRC_sc_player_stream_time(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_player_stream_duration")]
  public static extern double CPRC_sc_player_stream_duration(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_player_samples_sent")]
  public static extern int CPRC_sc_player_samples_sent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_player_sample_rate")]
  public static extern int CPRC_sc_player_sample_rate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_short")]
  public static extern global::System.IntPtr CPRC_sc_audio_short(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_short_offset")]
  public static extern global::System.IntPtr CPRC_sc_audio_short_offset(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_short_disposable")]
  public static extern global::System.IntPtr CPRC_sc_audio_short_disposable(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_short_alloc")]
  public static extern global::System.IntPtr CPRC_sc_audio_short_alloc(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_tone")]
  public static extern global::System.IntPtr CPRC_sc_audio_tone(int jarg1, double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_pythonstr")]
  public static extern global::System.IntPtr CPRC_sc_audio_pythonstr(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_status")]
  public static extern int CPRC_sc_audio_status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_channel_type")]
  public static extern int CPRC_sc_audio_channel_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_channel")]
  public static extern void CPRC_sc_audio_channel(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_start_time")]
  public static extern double CPRC_sc_audio_start_time(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_delete")]
  public static extern void CPRC_sc_audio_delete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_play")]
  public static extern int CPRC_sc_audio_play(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_cue")]
  public static extern int CPRC_sc_audio_cue(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_cue_insert")]
  public static extern int CPRC_sc_audio_cue_insert(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_sleep_msecs")]
  public static extern void CPRC_sc_sleep_msecs(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_busy")]
  public static extern int CPRC_sc_audio_busy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_pauseon")]
  public static extern int CPRC_sc_audio_pauseon(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_pauseoff")]
  public static extern int CPRC_sc_audio_pauseoff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_paused")]
  public static extern int CPRC_sc_audio_paused(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_stop")]
  public static extern int CPRC_sc_audio_stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("cerevoice_aud_csharp", EntryPoint="CSharp_CPRC_sc_audio_skip")]
  public static extern int CPRC_sc_audio_skip(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);
}
